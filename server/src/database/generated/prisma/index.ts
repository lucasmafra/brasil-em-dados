// Code generated by Prisma (prisma@1.17.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { GraphQLSchema } from "graphql";
import { IResolvers } from "graphql-tools/dist/Interfaces";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  category: (where?: CategoryWhereInput) => Promise<boolean>;
  point: (where?: PointWhereInput) => Promise<boolean>;
  statistic: (where?: StatisticWhereInput) => Promise<boolean>;
}

export interface Node {}

export interface Fragmentable {
  $fragment<T>(fragment: string | Object): T;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;
  $getAbstractResolvers(filterSchema?: GraphQLSchema | string): IResolvers;

  /**
   * Queries
   */

  category: (where: CategoryWhereUniqueInput) => Category;
  categories: (
    args?: {
      where?: CategoryWhereInput;
      orderBy?: CategoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<CategoryNode>>;
  categoriesConnection: (
    args?: {
      where?: CategoryWhereInput;
      orderBy?: CategoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CategoryConnection;
  points: (
    args?: {
      where?: PointWhereInput;
      orderBy?: PointOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<PointNode>>;
  pointsConnection: (
    args?: {
      where?: PointWhereInput;
      orderBy?: PointOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PointConnection;
  statistic: (where: StatisticWhereUniqueInput) => Statistic;
  statistics: (
    args?: {
      where?: StatisticWhereInput;
      orderBy?: StatisticOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<StatisticNode>>;
  statisticsConnection: (
    args?: {
      where?: StatisticWhereInput;
      orderBy?: StatisticOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => StatisticConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCategory: (data: CategoryCreateInput) => Category;
  updateCategory: (
    args: { data: CategoryUpdateInput; where: CategoryWhereUniqueInput }
  ) => Category;
  updateManyCategories: (
    args: { data: CategoryUpdateInput; where?: CategoryWhereInput }
  ) => BatchPayload;
  upsertCategory: (
    args: {
      where: CategoryWhereUniqueInput;
      create: CategoryCreateInput;
      update: CategoryUpdateInput;
    }
  ) => Category;
  deleteCategory: (where: CategoryWhereUniqueInput) => Category;
  deleteManyCategories: (where?: CategoryWhereInput) => BatchPayload;
  createPoint: (data: PointCreateInput) => Point;
  updateManyPoints: (
    args: { data: PointUpdateInput; where?: PointWhereInput }
  ) => BatchPayload;
  deleteManyPoints: (where?: PointWhereInput) => BatchPayload;
  createStatistic: (data: StatisticCreateInput) => Statistic;
  updateStatistic: (
    args: { data: StatisticUpdateInput; where: StatisticWhereUniqueInput }
  ) => Statistic;
  updateManyStatistics: (
    args: { data: StatisticUpdateInput; where?: StatisticWhereInput }
  ) => BatchPayload;
  upsertStatistic: (
    args: {
      where: StatisticWhereUniqueInput;
      create: StatisticCreateInput;
      update: StatisticUpdateInput;
    }
  ) => Statistic;
  deleteStatistic: (where: StatisticWhereUniqueInput) => Statistic;
  deleteManyStatistics: (where?: StatisticWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  category: (
    where?: CategorySubscriptionWhereInput
  ) => CategorySubscriptionPayloadSubscription;
  point: (
    where?: PointSubscriptionWhereInput
  ) => PointSubscriptionPayloadSubscription;
  statistic: (
    where?: StatisticSubscriptionWhereInput
  ) => StatisticSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CategoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PointOrderByInput =
  | "xValue_ASC"
  | "xValue_DESC"
  | "yValue_ASC"
  | "yValue_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type StatisticOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "slug_ASC"
  | "slug_DESC"
  | "shortTitle_ASC"
  | "shortTitle_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "xLabel_ASC"
  | "xLabel_DESC"
  | "yLabel_ASC"
  | "yLabel_DESC"
  | "source_ASC"
  | "source_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export interface StatisticUpdateInput {
  slug?: String;
  shortTitle?: String;
  title?: String;
  description?: String;
  xLabel?: String;
  yLabel?: String;
  source?: String;
  category?: CategoryUpdateOneRequiredInput;
  points?: PointUpdateManyInput;
}

export type CategoryWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CategoryCreateOneInput {
  create?: CategoryCreateInput;
  connect?: CategoryWhereUniqueInput;
}

export interface CategorySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CategoryWhereInput;
  AND?: CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput;
  OR?: CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput;
  NOT?: CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput;
}

export interface StatisticCreateInput {
  slug: String;
  shortTitle: String;
  title: String;
  description: String;
  xLabel: String;
  yLabel: String;
  source: String;
  category: CategoryCreateOneInput;
  points?: PointCreateManyInput;
}

export interface CategoryUpsertNestedInput {
  update: CategoryUpdateDataInput;
  create: CategoryCreateInput;
}

export interface PointUpdateInput {
  xValue?: Float;
  yValue?: Float;
}

export interface CategoryUpdateOneRequiredInput {
  create?: CategoryCreateInput;
  update?: CategoryUpdateDataInput;
  upsert?: CategoryUpsertNestedInput;
  connect?: CategoryWhereUniqueInput;
}

export type StatisticWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface StatisticSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: StatisticWhereInput;
  AND?: StatisticSubscriptionWhereInput[] | StatisticSubscriptionWhereInput;
  OR?: StatisticSubscriptionWhereInput[] | StatisticSubscriptionWhereInput;
  NOT?: StatisticSubscriptionWhereInput[] | StatisticSubscriptionWhereInput;
}

export interface PointCreateInput {
  xValue: Float;
  yValue: Float;
}

export interface PointCreateManyInput {
  create?: PointCreateInput[] | PointCreateInput;
}

export interface CategoryCreateInput {
  title: String;
  description?: String;
}

export interface CategoryUpdateInput {
  title?: String;
  description?: String;
}

export interface PointSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PointWhereInput;
  AND?: PointSubscriptionWhereInput[] | PointSubscriptionWhereInput;
  OR?: PointSubscriptionWhereInput[] | PointSubscriptionWhereInput;
  NOT?: PointSubscriptionWhereInput[] | PointSubscriptionWhereInput;
}

export interface StatisticWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  slug?: String;
  slug_not?: String;
  slug_in?: String[] | String;
  slug_not_in?: String[] | String;
  slug_lt?: String;
  slug_lte?: String;
  slug_gt?: String;
  slug_gte?: String;
  slug_contains?: String;
  slug_not_contains?: String;
  slug_starts_with?: String;
  slug_not_starts_with?: String;
  slug_ends_with?: String;
  slug_not_ends_with?: String;
  shortTitle?: String;
  shortTitle_not?: String;
  shortTitle_in?: String[] | String;
  shortTitle_not_in?: String[] | String;
  shortTitle_lt?: String;
  shortTitle_lte?: String;
  shortTitle_gt?: String;
  shortTitle_gte?: String;
  shortTitle_contains?: String;
  shortTitle_not_contains?: String;
  shortTitle_starts_with?: String;
  shortTitle_not_starts_with?: String;
  shortTitle_ends_with?: String;
  shortTitle_not_ends_with?: String;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  xLabel?: String;
  xLabel_not?: String;
  xLabel_in?: String[] | String;
  xLabel_not_in?: String[] | String;
  xLabel_lt?: String;
  xLabel_lte?: String;
  xLabel_gt?: String;
  xLabel_gte?: String;
  xLabel_contains?: String;
  xLabel_not_contains?: String;
  xLabel_starts_with?: String;
  xLabel_not_starts_with?: String;
  xLabel_ends_with?: String;
  xLabel_not_ends_with?: String;
  yLabel?: String;
  yLabel_not?: String;
  yLabel_in?: String[] | String;
  yLabel_not_in?: String[] | String;
  yLabel_lt?: String;
  yLabel_lte?: String;
  yLabel_gt?: String;
  yLabel_gte?: String;
  yLabel_contains?: String;
  yLabel_not_contains?: String;
  yLabel_starts_with?: String;
  yLabel_not_starts_with?: String;
  yLabel_ends_with?: String;
  yLabel_not_ends_with?: String;
  source?: String;
  source_not?: String;
  source_in?: String[] | String;
  source_not_in?: String[] | String;
  source_lt?: String;
  source_lte?: String;
  source_gt?: String;
  source_gte?: String;
  source_contains?: String;
  source_not_contains?: String;
  source_starts_with?: String;
  source_not_starts_with?: String;
  source_ends_with?: String;
  source_not_ends_with?: String;
  category?: CategoryWhereInput;
  points_every?: PointWhereInput;
  points_some?: PointWhereInput;
  points_none?: PointWhereInput;
  AND?: StatisticWhereInput[] | StatisticWhereInput;
  OR?: StatisticWhereInput[] | StatisticWhereInput;
  NOT?: StatisticWhereInput[] | StatisticWhereInput;
}

export interface PointUpdateManyInput {
  create?: PointCreateInput[] | PointCreateInput;
}

export interface CategoryWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  AND?: CategoryWhereInput[] | CategoryWhereInput;
  OR?: CategoryWhereInput[] | CategoryWhereInput;
  NOT?: CategoryWhereInput[] | CategoryWhereInput;
}

export interface PointWhereInput {
  xValue?: Float;
  xValue_not?: Float;
  xValue_in?: Float[] | Float;
  xValue_not_in?: Float[] | Float;
  xValue_lt?: Float;
  xValue_lte?: Float;
  xValue_gt?: Float;
  xValue_gte?: Float;
  yValue?: Float;
  yValue_not?: Float;
  yValue_in?: Float[] | Float;
  yValue_not_in?: Float[] | Float;
  yValue_lt?: Float;
  yValue_lte?: Float;
  yValue_gt?: Float;
  yValue_gte?: Float;
  AND?: PointWhereInput[] | PointWhereInput;
  OR?: PointWhereInput[] | PointWhereInput;
  NOT?: PointWhereInput[] | PointWhereInput;
}

export interface CategoryUpdateDataInput {
  title?: String;
  description?: String;
}

export interface NodeNode {
  id: ID_Output;
}

export interface AggregateStatisticNode {
  count: Int;
}

export interface AggregateStatistic
  extends Promise<AggregateStatisticNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStatisticSubscription
  extends Promise<AsyncIterator<AggregateStatisticNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CategoryEdgeNode {
  cursor: String;
}

export interface CategoryEdge extends Promise<CategoryEdgeNode>, Fragmentable {
  node: <T = Category>() => T;
  cursor: () => Promise<String>;
}

export interface CategoryEdgeSubscription
  extends Promise<AsyncIterator<CategoryEdgeNode>>,
    Fragmentable {
  node: <T = CategorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface StatisticPreviousValuesNode {
  id: ID_Output;
  slug: String;
  shortTitle: String;
  title: String;
  description: String;
  xLabel: String;
  yLabel: String;
  source: String;
}

export interface StatisticPreviousValues
  extends Promise<StatisticPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  slug: () => Promise<String>;
  shortTitle: () => Promise<String>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  xLabel: () => Promise<String>;
  yLabel: () => Promise<String>;
  source: () => Promise<String>;
}

export interface StatisticPreviousValuesSubscription
  extends Promise<AsyncIterator<StatisticPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  slug: () => Promise<AsyncIterator<String>>;
  shortTitle: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  xLabel: () => Promise<AsyncIterator<String>>;
  yLabel: () => Promise<AsyncIterator<String>>;
  source: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCategoryNode {
  count: Int;
}

export interface AggregateCategory
  extends Promise<AggregateCategoryNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCategorySubscription
  extends Promise<AsyncIterator<AggregateCategoryNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PointSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface PointSubscriptionPayload
  extends Promise<PointSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Point>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PointPreviousValues>() => T;
}

export interface PointSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PointSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PointSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PointPreviousValuesSubscription>() => T;
}

export interface StatisticEdgeNode {
  cursor: String;
}

export interface StatisticEdge
  extends Promise<StatisticEdgeNode>,
    Fragmentable {
  node: <T = Statistic>() => T;
  cursor: () => Promise<String>;
}

export interface StatisticEdgeSubscription
  extends Promise<AsyncIterator<StatisticEdgeNode>>,
    Fragmentable {
  node: <T = StatisticSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface StatisticConnectionNode {}

export interface StatisticConnection
  extends Promise<StatisticConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<StatisticEdgeNode>>>() => T;
  aggregate: <T = AggregateStatistic>() => T;
}

export interface StatisticConnectionSubscription
  extends Promise<AsyncIterator<StatisticConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<StatisticEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateStatisticSubscription>() => T;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface StatisticNode {
  id: ID_Output;
  slug: String;
  shortTitle: String;
  title: String;
  description: String;
  xLabel: String;
  yLabel: String;
  source: String;
}

export interface Statistic extends Promise<StatisticNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  slug: () => Promise<String>;
  shortTitle: () => Promise<String>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  xLabel: () => Promise<String>;
  yLabel: () => Promise<String>;
  source: () => Promise<String>;
  category: <T = Category>() => T;
  points: <T = Promise<Array<PointNode>>>(
    args?: {
      where?: PointWhereInput;
      orderBy?: PointOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface StatisticSubscription
  extends Promise<AsyncIterator<StatisticNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  slug: () => Promise<AsyncIterator<String>>;
  shortTitle: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  xLabel: () => Promise<AsyncIterator<String>>;
  yLabel: () => Promise<AsyncIterator<String>>;
  source: () => Promise<AsyncIterator<String>>;
  category: <T = CategorySubscription>() => T;
  points: <T = Promise<AsyncIterator<Array<PointSubscription>>>>(
    args?: {
      where?: PointWhereInput;
      orderBy?: PointOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface PointEdgeNode {
  cursor: String;
}

export interface PointEdge extends Promise<PointEdgeNode>, Fragmentable {
  node: <T = Point>() => T;
  cursor: () => Promise<String>;
}

export interface PointEdgeSubscription
  extends Promise<AsyncIterator<PointEdgeNode>>,
    Fragmentable {
  node: <T = PointSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PointNode {
  xValue: Float;
  yValue: Float;
}

export interface Point extends Promise<PointNode>, Fragmentable {
  xValue: () => Promise<Float>;
  yValue: () => Promise<Float>;
}

export interface PointSubscription
  extends Promise<AsyncIterator<PointNode>>,
    Fragmentable {
  xValue: () => Promise<AsyncIterator<Float>>;
  yValue: () => Promise<AsyncIterator<Float>>;
}

export interface CategoryPreviousValuesNode {
  id: ID_Output;
  title: String;
  description?: String;
}

export interface CategoryPreviousValues
  extends Promise<CategoryPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
}

export interface CategoryPreviousValuesSubscription
  extends Promise<AsyncIterator<CategoryPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface CategorySubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface CategorySubscriptionPayload
  extends Promise<CategorySubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Category>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CategoryPreviousValues>() => T;
}

export interface CategorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CategorySubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CategorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CategoryPreviousValuesSubscription>() => T;
}

export interface PointPreviousValuesNode {
  xValue: Float;
  yValue: Float;
}

export interface PointPreviousValues
  extends Promise<PointPreviousValuesNode>,
    Fragmentable {
  xValue: () => Promise<Float>;
  yValue: () => Promise<Float>;
}

export interface PointPreviousValuesSubscription
  extends Promise<AsyncIterator<PointPreviousValuesNode>>,
    Fragmentable {
  xValue: () => Promise<AsyncIterator<Float>>;
  yValue: () => Promise<AsyncIterator<Float>>;
}

export interface CategoryConnectionNode {}

export interface CategoryConnection
  extends Promise<CategoryConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<CategoryEdgeNode>>>() => T;
  aggregate: <T = AggregateCategory>() => T;
}

export interface CategoryConnectionSubscription
  extends Promise<AsyncIterator<CategoryConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<CategoryEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateCategorySubscription>() => T;
}

export interface CategoryNode {
  id: ID_Output;
  title: String;
  description?: String;
}

export interface Category extends Promise<CategoryNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
}

export interface CategorySubscription
  extends Promise<AsyncIterator<CategoryNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface PointConnectionNode {}

export interface PointConnection
  extends Promise<PointConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<PointEdgeNode>>>() => T;
  aggregate: <T = AggregatePoint>() => T;
}

export interface PointConnectionSubscription
  extends Promise<AsyncIterator<PointConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<PointEdgeSubscription>>>>() => T;
  aggregate: <T = AggregatePointSubscription>() => T;
}

export interface AggregatePointNode {
  count: Int;
}

export interface AggregatePoint
  extends Promise<AggregatePointNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePointSubscription
  extends Promise<AsyncIterator<AggregatePointNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface StatisticSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface StatisticSubscriptionPayload
  extends Promise<StatisticSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Statistic>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StatisticPreviousValues>() => T;
}

export interface StatisticSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StatisticSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StatisticSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StatisticPreviousValuesSubscription>() => T;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  endpoint: "http://localhost:4466"
});
export const prisma = new Prisma();
